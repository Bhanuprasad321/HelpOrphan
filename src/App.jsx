import React, { useState, useEffect, useCallback } from "react";
import { Routes, Route } from "react-router-dom";
import Home from "./components/Home";
import About from "./components/About";
import Contact from "./components/Contact";
import Navbar from "./components/Navbar";
import AdminWishListView from "./components/AdminWishListView";
import AddForm from "./components/AddForm";
import Wishlist from "./components/Wishlist";
import { AuthProvider, useAuth } from "./context/AuthContext";
import Login from "./components/Login";
import AdminDashboard from "./components/AdminDashboard";
import DonationForm from "./components/DonationForm";
import EditForm from "./components/EditForm";

// Wrapper to protect admin-only routes (no change)
function AdminRoute({ children }) {
Â  const { currentUser } = useAuth();
Â  const isAdmin = currentUser?.email === "admin@wishlist.com";

Â  if (!isAdmin) {
Â  Â  return (
Â  Â  Â  <div className="text-center mt-10 text-red-500 text-xl">
Â  Â  Â  Â  Â  Â  Â  Â  ðŸ”’ Access Denied: Admins only Â  Â  Â {" "}
Â  Â  Â  </div>
Â  Â  );
Â  }
Â  return children;
}

function App() {
Â  // 1. ðŸŽ¯ STATE MANAGEMENT: Centralize the item list and loading status
Â  const [items, setItems] = useState([]);
Â  const [loading, setLoading] = useState(false);

Â  // 2. ðŸŽ¯ FETCH FUNCTION: Create the function to fetch data from the backend
Â  const fetchItems = useCallback(async () => {
Â  Â  setLoading(true);
Â  Â  try {
Â  Â  Â  const response = await fetch("https://helporphanapi.onrender.com/wishlist");
Â  Â  Â  if (!response.ok) {
Â  Â  Â  Â  throw new Error("Failed to fetch wishlist items");
Â  Â  Â  }
Â  Â  Â  const data = await response.json();
Â  Â  Â  setItems(data); // Update the central state
Â  Â  } catch (error) {
Â  Â  Â  console.error("Error fetching wishlist:", error);
Â  Â  } finally {
Â  Â  Â  setLoading(false);
Â  Â  }
Â  }, []);

Â  // 3. ðŸŽ¯ INITIAL LOAD: Fetch data when the app mounts
Â  useEffect(() => {
Â  Â  fetchItems();
Â  }, [fetchItems]);

Â  return (
Â  Â  <AuthProvider>
Â  Â  Â  Â  Â  Â {" "}
Â  Â  Â  <div>
Â  Â  Â  Â  Â  Â  Â  Â  <Navbar />Â  Â 
Â  Â  Â  Â  <Routes>
Â  Â  Â  Â  Â  {/* Pass the item list to components that display it */}Â  Â  Â  Â  Â {" "}
Â  Â  Â  Â  Â  <Route
Â  Â  Â  Â  Â  Â  path="/"
Â  Â  Â  Â  Â  Â  element={
Â  Â  Â  Â  Â  Â  Â  <Home items={items} loading={loading} fetchItems={fetchItems} />
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Route path="/about" element={<About />} />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Route path="/contact" element={<Contact />} />
Â  Â  Â  Â  Â  {/* Pass the item list and the fetch function */}Â  Â  Â  Â  Â {" "}
Â  Â  Â  Â  Â  <Route
Â  Â  Â  Â  Â  Â  path="/wishlist"
Â  Â  Â  Â  Â  Â  element={
Â  Â  Â  Â  Â  Â  Â  <Wishlist
Â  Â  Â  Â  Â  Â  Â  Â  items={items}
Â  Â  Â  Â  Â  Â  Â  Â  loading={loading}
Â  Â  Â  Â  Â  Â  Â  Â  fetchItems={fetchItems}
Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Route path="/login" element={<Login />} />Â  Â  Â  Â  Â {" "}
Â  Â  Â  Â  Â  
          {/* CRITICAL FIX 1: Pass fetchItems to AdminWishListView */}
          <Route 
            path="/AdminWishListView" 
            element={<AdminWishListView items={items} loading={loading} fetchItems={fetchItems} />} 
          />Â {" "}
          
          {/* CRITICAL FIX 2: Change static path "/edit" to dynamic path "/edit/:id" and pass fetchItems */}
Â  Â  Â  Â  Â  <Route 
            path="/edit/:id" 
            element={
              <AdminRoute>
                <EditForm fetchItems={fetchItems} />
              </AdminRoute>
            } 
          />Â 
Â  Â  Â  Â  Â  Â Â  Â  Â  Â 
Â  Â  Â  Â  Â  {/* ðŸŽ¯ Pass the real fetchItems function to DonationForm */}Â 
Â  Â  Â  Â  Â  Â  Â  Â  Â {" "}
Â  Â  Â  Â  Â  <Route
Â  Â  Â  Â  Â  Â  path="/DonationForm"
Â  Â  Â  Â  Â  Â  element={<DonationForm fetchItems={fetchItems} />}
Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â {" "}
Â  Â  Â  Â  Â  <Route path="/AdminDashboard" element={<AdminDashboard />} />Â  Â  Â  Â  Â {" "}
Â  Â  Â  Â  Â  {/* Protected Route for AddForm */}Â  Â  Â  Â  Â {" "}
Â  Â  Â  Â  Â  <Route
Â  Â  Â  Â  Â  Â  path="/add"
Â  Â  Â  Â  Â  Â  element={
Â  Â  Â  Â  Â  Â  Â  <AdminRoute>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <AddForm fetchItems={fetchItems} />{" "}
Â  Â  Â  Â  Â  Â  Â  </AdminRoute>
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  Â {" "}
Â  Â  Â  Â  </Routes>
Â  Â  Â  Â  Â  Â  Â {" "}
Â  Â  Â  </div>
Â  Â  Â  Â  Â {" "}
Â  Â  </AuthProvider>
Â  );
}

export default App;
